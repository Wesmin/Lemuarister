一：命名规范：

1、类命名：大驼峰式命名：单词首字母大写，如：HelloWorld

2、函数命名：大驼峰式命名：单词首字母大写

3、公有变量命名：大驼峰式命名：单词首字母大写

4、私有变量命名：小驼峰式命名，禁止使用“_”进行变量命名。，如：helloWorld

5、局部变量命名：小驼峰式命名，禁止使用“_”进行变量命名。

6、参数名命名：小驼峰式命名，禁止使用“_”进行变量命名。

7、任何情况下不应该由外部访问的成员，使用双下划线打头，其它同私有变量命名，如：析构函数 __init，内部成员 __callback

8、UI组件实例的名字末尾标识组件类型，提高可读性：

a）基础组件（UIBaseComponent）：xxxCmp

b）按钮（UIButton）：xxxBtn

c）文本（UIText）：xxxTxet

d）图片（UIImage）：xxxImg

e）输入框（UIInput）：xxxInput

f）标签组（UITabGroup）：xxxTabgroup

g）按钮组（UIButtonGroup）：xxxBtngroup

h）可选中按钮（UIToggelButton）：xxxTogglebtn

i）可复用组件（UIWrapGroup）：xxxWrapgroup

j）滑动条组件（UISlider）：xxxSlider

k）后续...

9、所有UI脚本以UI打头，即UIxxxx

10、系统功能扩展函数自定义，需Util+功能性，提交至通用框架svn仓库

11、所有协程函数体以"Co"打头，如：CoAsyncLoad，表示该函数必须运行在协程中，并且可以使用任意协程相关函数

12、所有Unity Object均使用全局函数IsNull判空 

13、所有脚本需放在 Script 文件夹下

14、为提高代码维护性，禁止再项目中进行脚本及对象拖拽方式进行业务逻辑开发。

15、单例类尽量从项目框架中继承SingletonMono，不要重写Awake方法

16、单例类定义时内部函数书写规范同上：类定义和使用

17、所有类变量private私有化，对外公开的可封装 Set Get 方法

18、代码注释。使用标准注释///  特使业务逻辑需标注清楚

19、项目中冗余代码在发包前需全部删除

20、其它待续...


二：项目结构规范

1、使用通用项目初始化包中的项目结构，如需再根节Assets增加新文件夹，需在项目文档中标明使用

2、所有插件均放在ThirdParty、Plugins文件夹下

3、项目开发结束后要有相应的项目技术文档

4、不同平台及设备开发，请参照具体平台，设备开发要求。

5、svn提交格式：fix+提交内容  例如：fix 修复xxx bug

6、项目分包svn提交： fix 封包+版本+日期

7、其它待续...


三：资源管理及预制结构规范

1、资源命名遵循驼峰命名规范

2、预制命名遵循驼峰命名规范，禁止使用中文进行命名

3、其它待续...


四：数据类定义和使用

1、数据类：对普通类增加访问限制，具体为：不能对不存在的域进行读写。目的：减少因为笔误而造成的不可察Bug

2、全局数据中心GlobalDataManager，可根据具体项目进行数据分支中心的建立。

3、本地数据存储可使用PlayerPrefsHelper

4、其它待续...
 

五：全局变量使用

1、全局配置变量写在DefineConfig脚本中

2、全局枚举变量写在DefineEnum脚本中

3、业务性全局变量及枚举需自行新建脚本进行管理，均放在GlobaEnum、GlobalDefine文件夹中

5、其它待续...
 

六：UI窗口代码规范

1、编辑器UI业务开发需严格遵守MVC架构：Model层数据、View层窗口组件操作、Ctrl层数据操作，

2、其他项目UI业务逻辑需遵守基本UI框架 UIBasePanel逻辑。

3、UI数据存储多时需进行模块数据中心管理，存储数据少时存储在全局数据中心里即可。

4，功能性逻辑需与UI逻辑解耦，进行单独管理，命名规则：功能+item

5、其它待续...
 

七：工具类代码规范

1、所有和UI界面相关的公共函数添加到 Util/UIUtil

2、所有和C#语言直接相关的公共函数添加到 Util/Extensions中

3、所有功能性脚本添加到 Util/功能名字（新建文件夹）

4、其它待续...

 

九：框架代码规范

1、原则：保证框架代码的可迁移，如果需要迁移到新项目，可以不修改任何代码，或者修改很少的粘合代码即可使用。

2、如果需要完善框架，框架内的代码理论不要牵涉任何游戏逻辑，一般只提供管理类和基类，和业务相关的子类不要放在框架中。

3、如果框架代码更新需提交至框架SVN中。

4、所有插件功能需完全剥离框架，框架只提供基本管理类。如需增加，需新建类继承，切勿直接修改源码。
